# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:29:22+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AccessPolicy(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class AccountId(RootModel[constr(pattern=r'^\d{12}$', min_length=12, max_length=12)]):
    root: constr(pattern=r'^\d{12}$', min_length=12, max_length=12)


class AccountIds(RootModel[List[AccountId]]):
    root: List[AccountId] = Field(..., max_length=20, min_length=0)


class AmazonResourceName(
    RootModel[constr(pattern=r'[\w+=/:,.@-]*', min_length=1, max_length=1011)]
):
    root: constr(pattern=r'[\w+=/:,.@-]*', min_length=1, max_length=1011)


class Arn(RootModel[str]):
    root: str


class DataAlreadyAcceptedException(RootModel[Any]):
    root: Any


class DataProtectionPolicyDocument(RootModel[str]):
    root: str


class DataProtectionStatus(Enum):
    ACTIVATED = 'ACTIVATED'
    DELETED = 'DELETED'
    ARCHIVED = 'ARCHIVED'
    DISABLED = 'DISABLED'


class Days(RootModel[int]):
    root: int = Field(
        ...,
        description='<p>The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 2192, 2557, 2922, 3288, and 3653.</p> <p>To set a log group so that its log events do not expire, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html">DeleteRetentionPolicy</a>. </p>',
    )


class DefaultValue(RootModel[float]):
    root: float


class Descending(RootModel[bool]):
    root: bool


class DescribeLimit(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class DescribeQueriesMaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class DestinationArn(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class DestinationName(
    RootModel[constr(pattern=r'[^:*]*', min_length=1, max_length=512)]
):
    root: constr(pattern=r'[^:*]*', min_length=1, max_length=512)


class DimensionsKey(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class DimensionsValue(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class Distribution(Enum):
    Random = 'Random'
    ByLogStream = 'ByLogStream'


class EventId(RootModel[str]):
    root: str


class EventMessage(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class EventNumber(RootModel[int]):
    root: int


class EventsLimit(RootModel[conint(ge=1, le=10000)]):
    root: conint(ge=1, le=10000)


class ExportDestinationBucket(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class ExportDestinationPrefix(RootModel[str]):
    root: str


class ExportTaskId(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class ExportTaskName(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class ExportTaskStatusCode(Enum):
    CANCELLED = 'CANCELLED'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    PENDING = 'PENDING'
    PENDING_CANCEL = 'PENDING_CANCEL'
    RUNNING = 'RUNNING'


class ExportTaskStatusMessage(RootModel[str]):
    root: str


class FieldModel(RootModel[str]):
    root: str


class FilterCount(RootModel[int]):
    root: int


class FilterName(RootModel[constr(pattern=r'[^:*]*', min_length=1, max_length=512)]):
    root: constr(pattern=r'[^:*]*', min_length=1, max_length=512)


class FilterPattern(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024) = Field(
        ...,
        description='A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.',
    )


class ForceUpdate(RootModel[bool]):
    root: bool


class IncludeLinkedAccounts(RootModel[bool]):
    root: bool


class Interleaved(RootModel[bool]):
    root: bool


class InvalidOperationException(RootModel[Any]):
    root: Any


class InvalidParameterException(RootModel[Any]):
    root: Any


class InvalidSequenceTokenException(RootModel[Any]):
    root: Any


class KmsKeyId(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class LimitExceededException(RootModel[Any]):
    root: Any


class ListTagsForResourceRequest(BaseModel):
    resourceArn: AmazonResourceName


class LogEventIndex(RootModel[int]):
    root: int


class LogGroupIdentifier(
    RootModel[constr(pattern=r'[\w#+=/:,.@-]*', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'[\w#+=/:,.@-]*', min_length=1, max_length=2048)


class LogGroupIdentifiers(RootModel[List[LogGroupIdentifier]]):
    root: List[LogGroupIdentifier]


class LogGroupName(
    RootModel[constr(pattern=r'[\.\-_/#A-Za-z0-9]+', min_length=1, max_length=512)]
):
    root: constr(pattern=r'[\.\-_/#A-Za-z0-9]+', min_length=1, max_length=512)


class LogGroupNamePattern(
    RootModel[constr(pattern=r'[\.\-_/#A-Za-z0-9]*', min_length=0, max_length=512)]
):
    root: constr(pattern=r'[\.\-_/#A-Za-z0-9]*', min_length=0, max_length=512)


class LogGroupNames(RootModel[List[LogGroupName]]):
    root: List[LogGroupName]


class LogRecordPointer(RootModel[str]):
    root: str


class LogStreamName(RootModel[constr(pattern=r'[^:*]*', min_length=1, max_length=512)]):
    root: constr(pattern=r'[^:*]*', min_length=1, max_length=512)


class LogStreamSearchedCompletely(RootModel[bool]):
    root: bool


class MalformedQueryException(RootModel[Any]):
    root: Any


class MetricName(RootModel[constr(pattern=r'[^:*$]*', max_length=255)]):
    root: constr(pattern=r'[^:*$]*', max_length=255) = Field(
        ...,
        description='The name of the CloudWatch metric to which the monitored log information should be published. For example, you might publish to a metric named ErrorCount.',
    )


class MetricNamespace(RootModel[constr(pattern=r'[^:*$]*', max_length=255)]):
    root: constr(pattern=r'[^:*$]*', max_length=255)


class MetricValue(RootModel[constr(max_length=100)]):
    root: constr(max_length=100) = Field(
        ...,
        description="The value to publish to the CloudWatch metric. For example, if you're counting the occurrences of a term like <code>Error</code>, the value is <code>1</code> for each occurrence. If you're counting the bytes transferred, the value is the value in the log event.",
    )


class NextToken(RootModel[constr(min_length=1)]):
    root: constr(min_length=1) = Field(
        ...,
        description='The token for the next set of items to return. The token expires after 24 hours.',
    )


class OperationAbortedException(RootModel[Any]):
    root: Any


class OrderBy(Enum):
    LogStreamName = 'LogStreamName'
    LastEventTime = 'LastEventTime'


class Percentage(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class PolicyDocument(RootModel[constr(min_length=1, max_length=5120)]):
    root: constr(min_length=1, max_length=5120)


class PolicyName(RootModel[str]):
    root: str


class PutDataProtectionPolicyRequest(BaseModel):
    logGroupIdentifier: LogGroupIdentifier
    policyDocument: DataProtectionPolicyDocument


class PutDestinationPolicyRequest(BaseModel):
    accessPolicy: AccessPolicy
    destinationName: DestinationName
    forceUpdate: Optional[ForceUpdate] = None


class PutResourcePolicyRequest(BaseModel):
    policyDocument: Optional[PolicyDocument] = None
    policyName: Optional[PolicyName] = None


class PutRetentionPolicyRequest(BaseModel):
    logGroupName: LogGroupName
    retentionInDays: Days


class QueryDefinitionName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class QueryDefinitionString(RootModel[constr(min_length=1, max_length=10000)]):
    root: constr(min_length=1, max_length=10000)


class QueryId(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class QueryListMaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class QueryStatus(Enum):
    Scheduled = 'Scheduled'
    Running = 'Running'
    Complete = 'Complete'
    Failed = 'Failed'
    Cancelled = 'Cancelled'
    Timeout = 'Timeout'
    Unknown = 'Unknown'


class QueryString(RootModel[constr(min_length=0, max_length=10000)]):
    root: constr(min_length=0, max_length=10000)


class RejectedLogEventsInfo(BaseModel):
    expiredLogEventEndIndex: Optional[LogEventIndex] = None
    tooNewLogEventStartIndex: Optional[LogEventIndex] = None
    tooOldLogEventEndIndex: Optional[LogEventIndex] = None


class ResourceAlreadyExistsException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RoleArn(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class SearchedLogStream(BaseModel):
    logStreamName: Optional[LogStreamName] = None
    searchedCompletely: Optional[LogStreamSearchedCompletely] = None


class SearchedLogStreams(RootModel[List[SearchedLogStream]]):
    root: List[SearchedLogStream]


class SequenceToken(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class StandardUnit(Enum):
    Seconds = 'Seconds'
    Microseconds = 'Microseconds'
    Milliseconds = 'Milliseconds'
    Bytes = 'Bytes'
    Kilobytes = 'Kilobytes'
    Megabytes = 'Megabytes'
    Gigabytes = 'Gigabytes'
    Terabytes = 'Terabytes'
    Bits = 'Bits'
    Kilobits = 'Kilobits'
    Megabits = 'Megabits'
    Gigabits = 'Gigabits'
    Terabits = 'Terabits'
    Percent = 'Percent'
    Count = 'Count'
    Bytes_Second = 'Bytes/Second'
    Kilobytes_Second = 'Kilobytes/Second'
    Megabytes_Second = 'Megabytes/Second'
    Gigabytes_Second = 'Gigabytes/Second'
    Terabytes_Second = 'Terabytes/Second'
    Bits_Second = 'Bits/Second'
    Kilobits_Second = 'Kilobits/Second'
    Megabits_Second = 'Megabits/Second'
    Gigabits_Second = 'Gigabits/Second'
    Terabits_Second = 'Terabits/Second'
    Count_Second = 'Count/Second'
    None_ = 'None'


class StartFromHead(RootModel[bool]):
    root: bool


class StartQueryResponse(BaseModel):
    queryId: Optional[QueryId] = None


class StatsValue(RootModel[float]):
    root: float


class StopQueryRequest(BaseModel):
    queryId: QueryId


class StoredBytes(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class Success(RootModel[bool]):
    root: bool


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]+)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]+)$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=0)


class TagList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., min_length=1)


class TagValue(
    RootModel[constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', max_length=256)]
):
    root: constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', max_length=256)


class Tags(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TargetArn(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class TestEventMessages(RootModel[List[EventMessage]]):
    root: List[EventMessage] = Field(..., max_length=50, min_length=1)


class TestMetricFilterRequest(BaseModel):
    filterPattern: FilterPattern
    logEventMessages: TestEventMessages


class Timestamp(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class Token(RootModel[str]):
    root: str


class TooManyTagsException(RootModel[Any]):
    root: Any


class Unmask(RootModel[bool]):
    root: bool


class UnrecognizedClientException(RootModel[Any]):
    root: Any


class UntagLogGroupRequest(BaseModel):
    logGroupName: LogGroupName
    tags: TagList


class UntagResourceRequest(BaseModel):
    resourceArn: AmazonResourceName
    tagKeys: TagKeyList


class Value(RootModel[str]):
    root: str


class XAmzTarget(Enum):
    Logs_20140328_AssociateKmsKey = 'Logs_20140328.AssociateKmsKey'


class XAmzTarget1(Enum):
    Logs_20140328_CancelExportTask = 'Logs_20140328.CancelExportTask'


class XAmzTarget2(Enum):
    Logs_20140328_CreateExportTask = 'Logs_20140328.CreateExportTask'


class XAmzTarget3(Enum):
    Logs_20140328_CreateLogGroup = 'Logs_20140328.CreateLogGroup'


class XAmzTarget4(Enum):
    Logs_20140328_CreateLogStream = 'Logs_20140328.CreateLogStream'


class XAmzTarget5(Enum):
    Logs_20140328_DeleteDataProtectionPolicy = (
        'Logs_20140328.DeleteDataProtectionPolicy'
    )


class XAmzTarget6(Enum):
    Logs_20140328_DeleteDestination = 'Logs_20140328.DeleteDestination'


class XAmzTarget7(Enum):
    Logs_20140328_DeleteLogGroup = 'Logs_20140328.DeleteLogGroup'


class XAmzTarget8(Enum):
    Logs_20140328_DeleteLogStream = 'Logs_20140328.DeleteLogStream'


class XAmzTarget9(Enum):
    Logs_20140328_DeleteMetricFilter = 'Logs_20140328.DeleteMetricFilter'


class XAmzTarget10(Enum):
    Logs_20140328_DeleteQueryDefinition = 'Logs_20140328.DeleteQueryDefinition'


class XAmzTarget11(Enum):
    Logs_20140328_DeleteResourcePolicy = 'Logs_20140328.DeleteResourcePolicy'


class XAmzTarget12(Enum):
    Logs_20140328_DeleteRetentionPolicy = 'Logs_20140328.DeleteRetentionPolicy'


class XAmzTarget13(Enum):
    Logs_20140328_DeleteSubscriptionFilter = 'Logs_20140328.DeleteSubscriptionFilter'


class XAmzTarget14(Enum):
    Logs_20140328_DescribeDestinations = 'Logs_20140328.DescribeDestinations'


class XAmzTarget15(Enum):
    Logs_20140328_DescribeExportTasks = 'Logs_20140328.DescribeExportTasks'


class XAmzTarget16(Enum):
    Logs_20140328_DescribeLogGroups = 'Logs_20140328.DescribeLogGroups'


class XAmzTarget17(Enum):
    Logs_20140328_DescribeLogStreams = 'Logs_20140328.DescribeLogStreams'


class XAmzTarget18(Enum):
    Logs_20140328_DescribeMetricFilters = 'Logs_20140328.DescribeMetricFilters'


class XAmzTarget19(Enum):
    Logs_20140328_DescribeQueries = 'Logs_20140328.DescribeQueries'


class XAmzTarget20(Enum):
    Logs_20140328_DescribeQueryDefinitions = 'Logs_20140328.DescribeQueryDefinitions'


class XAmzTarget21(Enum):
    Logs_20140328_DescribeResourcePolicies = 'Logs_20140328.DescribeResourcePolicies'


class XAmzTarget22(Enum):
    Logs_20140328_DescribeSubscriptionFilters = (
        'Logs_20140328.DescribeSubscriptionFilters'
    )


class XAmzTarget23(Enum):
    Logs_20140328_DisassociateKmsKey = 'Logs_20140328.DisassociateKmsKey'


class XAmzTarget24(Enum):
    Logs_20140328_FilterLogEvents = 'Logs_20140328.FilterLogEvents'


class XAmzTarget25(Enum):
    Logs_20140328_GetDataProtectionPolicy = 'Logs_20140328.GetDataProtectionPolicy'


class XAmzTarget26(Enum):
    Logs_20140328_GetLogEvents = 'Logs_20140328.GetLogEvents'


class XAmzTarget27(Enum):
    Logs_20140328_GetLogGroupFields = 'Logs_20140328.GetLogGroupFields'


class XAmzTarget28(Enum):
    Logs_20140328_GetLogRecord = 'Logs_20140328.GetLogRecord'


class XAmzTarget29(Enum):
    Logs_20140328_GetQueryResults = 'Logs_20140328.GetQueryResults'


class XAmzTarget30(Enum):
    Logs_20140328_ListTagsForResource = 'Logs_20140328.ListTagsForResource'


class XAmzTarget31(Enum):
    Logs_20140328_ListTagsLogGroup = 'Logs_20140328.ListTagsLogGroup'


class XAmzTarget32(Enum):
    Logs_20140328_PutDataProtectionPolicy = 'Logs_20140328.PutDataProtectionPolicy'


class XAmzTarget33(Enum):
    Logs_20140328_PutDestination = 'Logs_20140328.PutDestination'


class XAmzTarget34(Enum):
    Logs_20140328_PutDestinationPolicy = 'Logs_20140328.PutDestinationPolicy'


class XAmzTarget35(Enum):
    Logs_20140328_PutLogEvents = 'Logs_20140328.PutLogEvents'


class XAmzTarget36(Enum):
    Logs_20140328_PutMetricFilter = 'Logs_20140328.PutMetricFilter'


class XAmzTarget37(Enum):
    Logs_20140328_PutQueryDefinition = 'Logs_20140328.PutQueryDefinition'


class XAmzTarget38(Enum):
    Logs_20140328_PutResourcePolicy = 'Logs_20140328.PutResourcePolicy'


class XAmzTarget39(Enum):
    Logs_20140328_PutRetentionPolicy = 'Logs_20140328.PutRetentionPolicy'


class XAmzTarget40(Enum):
    Logs_20140328_PutSubscriptionFilter = 'Logs_20140328.PutSubscriptionFilter'


class XAmzTarget41(Enum):
    Logs_20140328_StartQuery = 'Logs_20140328.StartQuery'


class XAmzTarget42(Enum):
    Logs_20140328_StopQuery = 'Logs_20140328.StopQuery'


class XAmzTarget43(Enum):
    Logs_20140328_TagLogGroup = 'Logs_20140328.TagLogGroup'


class XAmzTarget44(Enum):
    Logs_20140328_TagResource = 'Logs_20140328.TagResource'


class XAmzTarget45(Enum):
    Logs_20140328_TestMetricFilter = 'Logs_20140328.TestMetricFilter'


class XAmzTarget46(Enum):
    Logs_20140328_UntagLogGroup = 'Logs_20140328.UntagLogGroup'


class XAmzTarget47(Enum):
    Logs_20140328_UntagResource = 'Logs_20140328.UntagResource'


class AssociateKmsKeyRequest(BaseModel):
    kmsKeyId: KmsKeyId
    logGroupName: LogGroupName


class CancelExportTaskRequest(BaseModel):
    taskId: ExportTaskId


class CreateExportTaskRequest(BaseModel):
    destination: ExportDestinationBucket
    destinationPrefix: Optional[ExportDestinationPrefix] = None
    from_: Timestamp = Field(..., alias='from')
    logGroupName: LogGroupName
    logStreamNamePrefix: Optional[LogStreamName] = None
    taskName: Optional[ExportTaskName] = None
    to: Timestamp


class CreateExportTaskResponse(BaseModel):
    taskId: Optional[ExportTaskId] = None


class CreateLogGroupRequest(BaseModel):
    kmsKeyId: Optional[KmsKeyId] = None
    logGroupName: LogGroupName
    tags: Optional[Tags] = None


class CreateLogStreamRequest(BaseModel):
    logGroupName: LogGroupName
    logStreamName: LogStreamName


class DeleteDataProtectionPolicyRequest(BaseModel):
    logGroupIdentifier: LogGroupIdentifier


class DeleteDestinationRequest(BaseModel):
    destinationName: DestinationName


class DeleteLogGroupRequest(BaseModel):
    logGroupName: LogGroupName


class DeleteLogStreamRequest(BaseModel):
    logGroupName: LogGroupName
    logStreamName: LogStreamName


class DeleteMetricFilterRequest(BaseModel):
    filterName: FilterName
    logGroupName: LogGroupName


class DeleteQueryDefinitionRequest(BaseModel):
    queryDefinitionId: QueryId


class DeleteQueryDefinitionResponse(BaseModel):
    success: Optional[Success] = None


class DeleteResourcePolicyRequest(BaseModel):
    policyName: Optional[PolicyName] = None


class DeleteRetentionPolicyRequest(BaseModel):
    logGroupName: LogGroupName


class DeleteSubscriptionFilterRequest(BaseModel):
    filterName: FilterName
    logGroupName: LogGroupName


class DescribeDestinationsRequest(BaseModel):
    DestinationNamePrefix: Optional[DestinationName] = None
    limit: Optional[DescribeLimit] = None
    nextToken: Optional[NextToken] = None


class DescribeExportTasksRequest(BaseModel):
    limit: Optional[DescribeLimit] = None
    nextToken: Optional[NextToken] = None
    statusCode: Optional[ExportTaskStatusCode] = None
    taskId: Optional[ExportTaskId] = None


class DescribeLogGroupsRequest(BaseModel):
    accountIdentifiers: Optional[AccountIds] = None
    includeLinkedAccounts: Optional[IncludeLinkedAccounts] = None
    limit: Optional[DescribeLimit] = None
    logGroupNamePattern: Optional[LogGroupNamePattern] = None
    logGroupNamePrefix: Optional[LogGroupName] = None
    nextToken: Optional[NextToken] = None


class DescribeLogStreamsRequest(BaseModel):
    descending: Optional[Descending] = None
    limit: Optional[DescribeLimit] = None
    logGroupIdentifier: Optional[LogGroupIdentifier] = None
    logGroupName: Optional[LogGroupName] = None
    logStreamNamePrefix: Optional[LogStreamName] = None
    nextToken: Optional[NextToken] = None
    orderBy: Optional[OrderBy] = None


class DescribeMetricFiltersRequest(BaseModel):
    filterNamePrefix: Optional[FilterName] = None
    limit: Optional[DescribeLimit] = None
    logGroupName: Optional[LogGroupName] = None
    metricName: Optional[MetricName] = None
    metricNamespace: Optional[MetricNamespace] = None
    nextToken: Optional[NextToken] = None


class DescribeQueriesRequest(BaseModel):
    logGroupName: Optional[LogGroupName] = None
    maxResults: Optional[DescribeQueriesMaxResults] = None
    nextToken: Optional[NextToken] = None
    status: Optional[QueryStatus] = None


class DescribeQueryDefinitionsRequest(BaseModel):
    maxResults: Optional[QueryListMaxResults] = None
    nextToken: Optional[NextToken] = None
    queryDefinitionNamePrefix: Optional[QueryDefinitionName] = None


class DescribeResourcePoliciesRequest(BaseModel):
    limit: Optional[DescribeLimit] = None
    nextToken: Optional[NextToken] = None


class DescribeSubscriptionFiltersRequest(BaseModel):
    filterNamePrefix: Optional[FilterName] = None
    limit: Optional[DescribeLimit] = None
    logGroupName: LogGroupName
    nextToken: Optional[NextToken] = None


class Destination(BaseModel):
    accessPolicy: Optional[AccessPolicy] = None
    arn: Optional[Arn] = None
    creationTime: Optional[Timestamp] = None
    destinationName: Optional[DestinationName] = None
    roleArn: Optional[RoleArn] = None
    targetArn: Optional[TargetArn] = None


class Destinations(RootModel[List[Destination]]):
    root: List[Destination]


class Dimensions(RootModel[Optional[Dict[str, DimensionsValue]]]):
    root: Optional[Dict[str, DimensionsValue]] = None


class DisassociateKmsKeyRequest(BaseModel):
    logGroupName: LogGroupName


class ExportTaskExecutionInfo(BaseModel):
    completionTime: Optional[Timestamp] = None
    creationTime: Optional[Timestamp] = None


class ExportTaskStatus(BaseModel):
    code: Optional[ExportTaskStatusCode] = None
    message: Optional[ExportTaskStatusMessage] = None


class ExtractedValues(RootModel[Optional[Dict[str, Value]]]):
    root: Optional[Dict[str, Value]] = None


class FilteredLogEvent(BaseModel):
    eventId: Optional[EventId] = None
    ingestionTime: Optional[Timestamp] = None
    logStreamName: Optional[LogStreamName] = None
    message: Optional[EventMessage] = None
    timestamp: Optional[Timestamp] = None


class FilteredLogEvents(RootModel[List[FilteredLogEvent]]):
    root: List[FilteredLogEvent]


class GetDataProtectionPolicyRequest(BaseModel):
    logGroupIdentifier: LogGroupIdentifier


class GetDataProtectionPolicyResponse(BaseModel):
    lastUpdatedTime: Optional[Timestamp] = None
    logGroupIdentifier: Optional[LogGroupIdentifier] = None
    policyDocument: Optional[DataProtectionPolicyDocument] = None


class GetLogEventsRequest(BaseModel):
    endTime: Optional[Timestamp] = None
    limit: Optional[EventsLimit] = None
    logGroupIdentifier: Optional[LogGroupIdentifier] = None
    logGroupName: Optional[LogGroupName] = None
    logStreamName: LogStreamName
    nextToken: Optional[NextToken] = None
    startFromHead: Optional[StartFromHead] = None
    startTime: Optional[Timestamp] = None
    unmask: Optional[Unmask] = None


class GetLogGroupFieldsRequest(BaseModel):
    logGroupIdentifier: Optional[LogGroupIdentifier] = None
    logGroupName: Optional[LogGroupName] = None
    time: Optional[Timestamp] = None


class GetLogRecordRequest(BaseModel):
    logRecordPointer: LogRecordPointer
    unmask: Optional[Unmask] = None


class GetQueryResultsRequest(BaseModel):
    queryId: QueryId


class InputLogEvent(BaseModel):
    message: EventMessage
    timestamp: Timestamp


class InputLogEvents(RootModel[List[InputLogEvent]]):
    root: List[InputLogEvent] = Field(..., max_length=10000, min_length=1)


class InputLogStreamNames(RootModel[List[LogStreamName]]):
    root: List[LogStreamName] = Field(..., max_length=100, min_length=1)


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[Tags] = None


class ListTagsLogGroupRequest(BaseModel):
    logGroupName: LogGroupName


class ListTagsLogGroupResponse(BaseModel):
    tags: Optional[Tags] = None


class LogGroup(BaseModel):
    arn: Optional[Arn] = None
    creationTime: Optional[Timestamp] = None
    dataProtectionStatus: Optional[DataProtectionStatus] = None
    kmsKeyId: Optional[KmsKeyId] = None
    logGroupName: Optional[LogGroupName] = None
    metricFilterCount: Optional[FilterCount] = None
    retentionInDays: Optional[Days] = None
    storedBytes: Optional[StoredBytes] = None


class LogGroupField(BaseModel):
    name: Optional[FieldModel] = None
    percent: Optional[Percentage] = None


class LogGroupFieldList(RootModel[List[LogGroupField]]):
    root: List[LogGroupField]


class LogGroups(RootModel[List[LogGroup]]):
    root: List[LogGroup]


class LogRecord(RootModel[Optional[Dict[str, Value]]]):
    root: Optional[Dict[str, Value]] = None


class LogStream(BaseModel):
    arn: Optional[Arn] = None
    creationTime: Optional[Timestamp] = None
    firstEventTimestamp: Optional[Timestamp] = None
    lastEventTimestamp: Optional[Timestamp] = None
    lastIngestionTime: Optional[Timestamp] = None
    logStreamName: Optional[LogStreamName] = None
    storedBytes: Optional[StoredBytes] = None
    uploadSequenceToken: Optional[SequenceToken] = None


class LogStreams(RootModel[List[LogStream]]):
    root: List[LogStream]


class MetricFilterMatchRecord(BaseModel):
    eventMessage: Optional[EventMessage] = None
    eventNumber: Optional[EventNumber] = None
    extractedValues: Optional[ExtractedValues] = None


class MetricFilterMatches(RootModel[List[MetricFilterMatchRecord]]):
    root: List[MetricFilterMatchRecord]


class MetricTransformation(BaseModel):
    defaultValue: Optional[DefaultValue] = None
    dimensions: Optional[Dimensions] = None
    metricName: MetricName
    metricNamespace: MetricNamespace
    metricValue: MetricValue
    unit: Optional[StandardUnit] = None


class MetricTransformations(RootModel[List[MetricTransformation]]):
    root: List[MetricTransformation] = Field(..., max_length=1, min_length=1)


class OutputLogEvent(BaseModel):
    ingestionTime: Optional[Timestamp] = None
    message: Optional[EventMessage] = None
    timestamp: Optional[Timestamp] = None


class OutputLogEvents(RootModel[List[OutputLogEvent]]):
    root: List[OutputLogEvent]


class PutDataProtectionPolicyResponse(BaseModel):
    lastUpdatedTime: Optional[Timestamp] = None
    logGroupIdentifier: Optional[LogGroupIdentifier] = None
    policyDocument: Optional[DataProtectionPolicyDocument] = None


class PutDestinationRequest(BaseModel):
    destinationName: DestinationName
    roleArn: RoleArn
    tags: Optional[Tags] = None
    targetArn: TargetArn


class PutDestinationResponse(BaseModel):
    destination: Optional[Destination] = None


class PutLogEventsRequest(BaseModel):
    logEvents: InputLogEvents
    logGroupName: LogGroupName
    logStreamName: LogStreamName
    sequenceToken: Optional[SequenceToken] = None


class PutLogEventsResponse(BaseModel):
    nextSequenceToken: Optional[SequenceToken] = None
    rejectedLogEventsInfo: Optional[RejectedLogEventsInfo] = None


class PutMetricFilterRequest(BaseModel):
    filterName: FilterName
    filterPattern: FilterPattern
    logGroupName: LogGroupName
    metricTransformations: MetricTransformations


class PutQueryDefinitionRequest(BaseModel):
    logGroupNames: Optional[LogGroupNames] = None
    name: QueryDefinitionName
    queryDefinitionId: Optional[QueryId] = None
    queryString: QueryDefinitionString


class PutQueryDefinitionResponse(BaseModel):
    queryDefinitionId: Optional[QueryId] = None


class PutSubscriptionFilterRequest(BaseModel):
    destinationArn: DestinationArn
    distribution: Optional[Distribution] = None
    filterName: FilterName
    filterPattern: FilterPattern
    logGroupName: LogGroupName
    roleArn: Optional[RoleArn] = None


class QueryDefinition(BaseModel):
    lastModified: Optional[Timestamp] = None
    logGroupNames: Optional[LogGroupNames] = None
    name: Optional[QueryDefinitionName] = None
    queryDefinitionId: Optional[QueryId] = None
    queryString: Optional[QueryDefinitionString] = None


class QueryDefinitionList(RootModel[List[QueryDefinition]]):
    root: List[QueryDefinition]


class QueryInfo(BaseModel):
    createTime: Optional[Timestamp] = None
    logGroupName: Optional[LogGroupName] = None
    queryId: Optional[QueryId] = None
    queryString: Optional[QueryString] = None
    status: Optional[QueryStatus] = None


class QueryInfoList(RootModel[List[QueryInfo]]):
    root: List[QueryInfo]


class QueryStatistics(BaseModel):
    bytesScanned: Optional[StatsValue] = None
    recordsMatched: Optional[StatsValue] = None
    recordsScanned: Optional[StatsValue] = None


class ResourcePolicy(BaseModel):
    lastUpdatedTime: Optional[Timestamp] = None
    policyDocument: Optional[PolicyDocument] = None
    policyName: Optional[PolicyName] = None


class ResultField(BaseModel):
    field: Optional[FieldModel] = None
    value: Optional[Value] = None


class ResultRows(RootModel[List[ResultField]]):
    root: List[ResultField]


class StartQueryRequest(BaseModel):
    endTime: Timestamp
    limit: Optional[EventsLimit] = None
    logGroupIdentifiers: Optional[LogGroupIdentifiers] = None
    logGroupName: Optional[LogGroupName] = None
    logGroupNames: Optional[LogGroupNames] = None
    queryString: QueryString
    startTime: Timestamp


class StopQueryResponse(BaseModel):
    success: Optional[Success] = None


class SubscriptionFilter(BaseModel):
    creationTime: Optional[Timestamp] = None
    destinationArn: Optional[DestinationArn] = None
    distribution: Optional[Distribution] = None
    filterName: Optional[FilterName] = None
    filterPattern: Optional[FilterPattern] = None
    logGroupName: Optional[LogGroupName] = None
    roleArn: Optional[RoleArn] = None


class SubscriptionFilters(RootModel[List[SubscriptionFilter]]):
    root: List[SubscriptionFilter]


class TagLogGroupRequest(BaseModel):
    logGroupName: LogGroupName
    tags: Tags


class TagResourceRequest(BaseModel):
    resourceArn: AmazonResourceName
    tags: Tags


class TestMetricFilterResponse(BaseModel):
    matches: Optional[MetricFilterMatches] = None


class DescribeDestinationsResponse(BaseModel):
    destinations: Optional[Destinations] = None
    nextToken: Optional[NextToken] = None


class DescribeLogGroupsResponse(BaseModel):
    logGroups: Optional[LogGroups] = None
    nextToken: Optional[NextToken] = None


class DescribeLogStreamsResponse(BaseModel):
    logStreams: Optional[LogStreams] = None
    nextToken: Optional[NextToken] = None


class DescribeQueriesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    queries: Optional[QueryInfoList] = None


class DescribeQueryDefinitionsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    queryDefinitions: Optional[QueryDefinitionList] = None


class DescribeSubscriptionFiltersResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    subscriptionFilters: Optional[SubscriptionFilters] = None


class ExportTask(BaseModel):
    destination: Optional[ExportDestinationBucket] = None
    destinationPrefix: Optional[ExportDestinationPrefix] = None
    executionInfo: Optional[ExportTaskExecutionInfo] = None
    from_: Optional[Timestamp] = Field(None, alias='from')
    logGroupName: Optional[LogGroupName] = None
    status: Optional[ExportTaskStatus] = None
    taskId: Optional[ExportTaskId] = None
    taskName: Optional[ExportTaskName] = None
    to: Optional[Timestamp] = None


class ExportTasks(RootModel[List[ExportTask]]):
    root: List[ExportTask]


class FilterLogEventsRequest(BaseModel):
    endTime: Optional[Timestamp] = None
    filterPattern: Optional[FilterPattern] = None
    interleaved: Optional[Interleaved] = None
    limit: Optional[EventsLimit] = None
    logGroupIdentifier: Optional[LogGroupIdentifier] = None
    logGroupName: Optional[LogGroupName] = None
    logStreamNamePrefix: Optional[LogStreamName] = None
    logStreamNames: Optional[InputLogStreamNames] = None
    nextToken: Optional[NextToken] = None
    startTime: Optional[Timestamp] = None
    unmask: Optional[Unmask] = None


class FilterLogEventsResponse(BaseModel):
    events: Optional[FilteredLogEvents] = None
    nextToken: Optional[NextToken] = None
    searchedLogStreams: Optional[SearchedLogStreams] = None


class GetLogEventsResponse(BaseModel):
    events: Optional[OutputLogEvents] = None
    nextBackwardToken: Optional[NextToken] = None
    nextForwardToken: Optional[NextToken] = None


class GetLogGroupFieldsResponse(BaseModel):
    logGroupFields: Optional[LogGroupFieldList] = None


class GetLogRecordResponse(BaseModel):
    logRecord: Optional[LogRecord] = None


class MetricFilter(BaseModel):
    creationTime: Optional[Timestamp] = None
    filterName: Optional[FilterName] = None
    filterPattern: Optional[FilterPattern] = None
    logGroupName: Optional[LogGroupName] = None
    metricTransformations: Optional[MetricTransformations] = None


class MetricFilters(RootModel[List[MetricFilter]]):
    root: List[MetricFilter]


class PutResourcePolicyResponse(BaseModel):
    resourcePolicy: Optional[ResourcePolicy] = None


class QueryResults(RootModel[List[ResultRows]]):
    root: List[ResultRows]


class ResourcePolicies(RootModel[List[ResourcePolicy]]):
    root: List[ResourcePolicy]


class DescribeExportTasksResponse(BaseModel):
    exportTasks: Optional[ExportTasks] = None
    nextToken: Optional[NextToken] = None


class DescribeMetricFiltersResponse(BaseModel):
    metricFilters: Optional[MetricFilters] = None
    nextToken: Optional[NextToken] = None


class DescribeResourcePoliciesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    resourcePolicies: Optional[ResourcePolicies] = None


class GetQueryResultsResponse(BaseModel):
    results: Optional[QueryResults] = None
    statistics: Optional[QueryStatistics] = None
    status: Optional[QueryStatus] = None
